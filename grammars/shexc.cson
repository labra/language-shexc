'name': 'ShEx'
'scopeName': 'source.ShEx'
'fileTypes': [
  'shex'
]
'patterns': [
  {
    'comment': 'Keywords'
    'name': 'keyword.control.shexc'
    'match': "\\b(?i:base|prefix|and|not|or|external|start|virtual|closed|extra|literal|iri|nonliteral|pattern|bnode|mininclusive|minexclusive|maxinclusive|maxexclusive|length|minlength|maxlength|totaldigits|fractiondigits)\\b"
  }
  {
    'comment': 'URI'
    'name': 'entity.name.tag.shexc'
    'match': '<[^<>\"{}|^`\\]\\\\]*>'
  }
  {
    'comment':  'Prefix / prefixed URI'
    'name': 'constant.complex.shexc'
    'match': '((?:\\w(?:(?:\\w|-|[\\xB7\\x{0300}-\\x{036F}\\x{203F}-\\x{2040}]|\\.)*(?:\\w|-|[\\xB7\\x{0300}-\\x{036F}\\x{203F}-\\x{2040}]))?)?:)([^\\s|/^*?+{}()]*)'
    'captures':
      '1':
        'name': 'constant.other.shexc'
      '2':
        'name': 'entity.name.tag.prefixed-uri.shexc'
  }
  {
    'comment': 'The special triple predicate a'
    'name': 'entity.name.rdf-type.shexc'
    'match': '\\sa\\s'
  },
  {
    "name": "constant.numeric.shexc",
    "comment": "Numeric literal",
    "match": "\\b[+-]?(?:\\d+|[0-9]+\\.[0-9]*|\\.[0-9]+(?:[eE][+-]?\\d+)?)\\b"
  },
  {
    "name": "constant.language.shexc",
    "comment": "Boolean",
    "match": "\\b(?i:true|false)\\b"
  },
  {
    'comment': 'Typed literal'
    'name': 'literal.shexc'
    'match': '(\"[^\"]*\")(\\^\\^)(<[^<>\"{}|^`\\]\\\\]*>|\\w*:[^\\s)]+)'
    'captures':
      '1':
        'name': 'string.shexc'
      '2':
        'name': 'keyword.operator.shexc'
      '3':
        'name': 'support.type.shexc'
  }
  {
    'comment':  'String literal long quote'
    'name': 'string-long-quote.shexc'
    'begin': '(\"{3})'
    'end': '(\"{3})(@[a-zA-Z-]+)?'
    'patterns': [
      {
        'match': '((?:(?:\"{1,2})?(?:[^\"\\x5C]|\\\\[tbnrf\"\'\\\\]))*)'
        'captures':
          '1':
            'name': 'string.quoted.triple.shexc'
      }
    ]
    'beginCaptures':
      '1':
        'name': 'string.quoted.triple.shexc'
    'endCaptures':
      '1':
        'name': 'string.quoted.triple.shexc'
      '2':
        'name': 'keyword.operator.shexc'
  }
  {
    'comment':  'String literal long single quote'
    'name': 'string-long-single-quote.shexc'
    'begin': '(\'{3})'
    'end': '(\'{3})(@[a-zA-Z-]+)?'
    'patterns': [
      {
        'match': '((?:(?:\'{1,2})?(?:[^\'\\x5C]|\\\\[tbnrf\"\'\\\\]))*)'
        'captures':
          '1':
            'name': 'string.quoted.triple.shexc'
      }
    ]
    'beginCaptures':
      '1':
        'name': 'string.quoted.triple.shexc'
    'endCaptures':
      '1':
        'name': 'string.quoted.triple.shexc'
      '2':
        'name': 'keyword.operator.shexc'
  }
  {
    'comment':  'String literal'
    'name': 'string.shexc'
    'match': '(\"(?:(?:[^\\x22\\x5C\\xA\\xD])|\\\\[tbnrf\"\'\\\\])*\")(@[a-zA-Z-]+)?'
    'captures':
      '1':
        'name': 'string.quoted.double.shexc'
      '2':
        'name': 'keyword.operator.shexc'
      '3':
        'name': 'support.type.shexc'
  }
  {
    'comment':  'String literal single quote'
    'name': 'string-single-quote.shexc'
    'match': '(\'(?:(?:[^\'\\x5C\\xA\\xD])|\\\\[tbnrf\"\'\\\\])*\')(@[a-zA-Z-]+)?'
    'captures':
      '1':
        'name': 'string.quoted.double.shexc'
      '2':
        'name': 'keyword.operator.shexc'
      '3':
        'name': 'support.type.shexc'
  }
  {
    'comment': 'Comments'
    'name': 'comment.line.number-sign.shexc'
    'match': '#.*$'
  }
  {
    'comment': 'Numeric literal'
    'name': 'constant.numeric.shexc'
    'match': '\\b[+-]?(?:\\d+|[0-9]+\\.[0-9]*|\\.[0-9]+(?:[eE][+-]?\\d+)?)\\b'
  }
  {
    'comment': 'Boolean'
    'name': 'constant.language.shexc'
    'match': '\\b(?:true|false)\\b'
  }
]
